/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef CONFIGURATIONVIEWBASE_HPP
#define CONFIGURATIONVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/configuration_screen/configurationPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/ButtonWithIcon.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class configurationViewBase : public touchgfx::View<configurationPresenter>
{
public:
    configurationViewBase();
    virtual ~configurationViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void buttonUpClicked()
    {
        // Override and implement this function in configuration
    }
    virtual void buttonDownClicked()
    {
        // Override and implement this function in configuration
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::Image backgroundimage;
    touchgfx::Button button2;
    touchgfx::Button button1;
    touchgfx::Image image1;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::TextArea textArea2;
    touchgfx::ButtonWithIcon next;
    touchgfx::RadioButtonGroup<3> radioButtonGroup1;
    touchgfx::RadioButton radioButton1;
    touchgfx::RadioButton radioButton2;
    touchgfx::RadioButton radioButton3;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 80;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<configurationViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // CONFIGURATIONVIEWBASE_HPP
